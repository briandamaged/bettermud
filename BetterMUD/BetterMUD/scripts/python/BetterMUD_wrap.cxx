/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_room swig_types[0] 
#define  SWIGTYPE_p_itemtemplate swig_types[1] 
#define  SWIGTYPE_p_charactertemplate swig_types[2] 
#define  SWIGTYPE_p_BasicLib__sint64 swig_types[3] 
#define  SWIGTYPE_p_Action swig_types[4] 
#define  SWIGTYPE_p_Logic swig_types[5] 
#define  SWIGTYPE_p_GameWrap swig_types[6] 
#define  SWIGTYPE_p_item swig_types[7] 
#define  SWIGTYPE_p_account swig_types[8] 
#define  SWIGTYPE_p_region swig_types[9] 
#define  SWIGTYPE_p_TimedAction swig_types[10] 
#define  SWIGTYPE_p_character swig_types[11] 
#define  SWIGTYPE_p_region__portals__iterator swig_types[12] 
#define  SWIGTYPE_p_region__rooms__iterator swig_types[13] 
#define  SWIGTYPE_p_portal swig_types[14] 
#define  SWIGTYPE_p_room__portals__iterator swig_types[15] 
static swig_type_info *swig_types[17];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _BetterMUD.so
  ------------------------------------------------*/
#define SWIG_init    init_BetterMUD

#define SWIG_name    "_BetterMUD"

#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#include <string>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_account(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    account *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_account",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (account *)new account(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_account, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_account(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_account",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SetID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SetName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SetDescription",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetDescription((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_AddCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_AddCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddCharacter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_DelCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_DelCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelCharacter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_Characters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_Characters",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Characters();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_BeginCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_BeginCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_CurrentCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_CurrentCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_NextCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_NextCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_IsValidCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_IsValidCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SeekCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SeekCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekCharacter((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_Password(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_Password",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Password();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_LoginTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    BasicLib::sint64 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_LoginTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->LoginTime();
    
    {
        BasicLib::sint64 * resultptr;
        resultptr = new BasicLib::sint64((BasicLib::sint64 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_BasicLib__sint64, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_AccessLevel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_AccessLevel",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->AccessLevel();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_Banned(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_Banned",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->Banned();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_AllowedCharacters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:account_AllowedCharacters",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->AllowedCharacters();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetPass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SetPass",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetPass((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetLoginTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    BasicLib::sint64 arg2 ;
    BasicLib::sint64 *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SetLoginTime",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_BasicLib__sint64,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->SetLoginTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetAccessLevel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:account_SetAccessLevel",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetAccessLevel(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetBanned(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:account_SetBanned",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetBanned(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_account_SetAllowedCharacters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    account *arg1 = (account *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:account_SetAllowedCharacters",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_account,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetAllowedCharacters(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * account_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_account, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_charactertemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    charactertemplate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_charactertemplate",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (charactertemplate *)new charactertemplate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_charactertemplate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_charactertemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_charactertemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:charactertemplate_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:charactertemplate_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:charactertemplate_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:charactertemplate_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:charactertemplate_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:charactertemplate_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:charactertemplate_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charactertemplate_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    charactertemplate *arg1 = (charactertemplate *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:charactertemplate_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_charactertemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * charactertemplate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_charactertemplate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    character *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_character",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (character *)new character(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_character, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_character",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetDescription",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetDescription((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Room(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Room",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->Room();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetRoom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Region(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Region",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->Region();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetRegion",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetRegion(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_TemplateID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_TemplateID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->TemplateID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetTemplateID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetTemplateID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetTemplateID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_AddItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_AddItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddItem(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DelItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_DelItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelItem(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Items(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Items",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Items();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_BeginItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_BeginItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_CurrentItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_CurrentItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_NextItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_NextItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_IsValidItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_IsValidItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SeekItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SeekItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekItem((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:character_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:character_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_AddLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_AddLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->AddLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_AddExistingLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    Logic *arg2 = (Logic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_AddExistingLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Logic,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->AddExistingLogic(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DelLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_DelLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->DelLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_GetLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    Logic *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_GetLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Logic *)(arg1)->GetLogic((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Logic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_HasLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_HasLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DoAction__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    Action *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_DoAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Action,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->DoAction((Action const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DoAction__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    entityid arg3 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    std::string *arg7 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:character_DoAction",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = (entityid) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj6)) {
            temp7 = std::string(PyString_AsString(obj6));
            arg7 = &temp7;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->DoAction((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DoAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = (int)PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_character, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_Action, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_character_DoAction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_character, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = PyString_Check(argv[6]) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_character_DoAction__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'character_DoAction'");
    return NULL;
}


static PyObject *_wrap_character_GetLogicAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:character_GetLogicAttribute",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetLogicAttribute((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_AddHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_AddHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->AddHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DelHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_DelHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DelHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Hooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Hooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Hooks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_KillHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:character_KillHook",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->KillHook((std::string const &)*arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_ClearHooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_ClearHooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ClearHooks();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_HasCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_HasCommand",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasCommand((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_AddCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_AddCommand",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->AddCommand((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_DelCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_DelCommand",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->DelCommand((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_BeginCommands(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_BeginCommands",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginCommands();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_CurrentCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_CurrentCommand",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->CurrentCommand();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_CurrentCommandUsage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_CurrentCommandUsage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->CurrentCommandUsage();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_CurrentCommandDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_CurrentCommandDescription",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->CurrentCommandDescription();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_NextCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_NextCommand",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextCommand();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_IsValidCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_IsValidCommand",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidCommand();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SeekCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SeekCommand",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekCommand((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Quiet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Quiet",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->Quiet();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_IsPlayer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_IsPlayer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsPlayer();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_Verbose(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_Verbose",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->Verbose();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_GetAccount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_GetAccount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->GetAccount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetQuiet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetQuiet",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetQuiet(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_SetAccount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:character_SetAccount",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetAccount(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_IsLoggedIn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_IsLoggedIn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsLoggedIn();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_character_LastCommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg1 = (character *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:character_LastCommand",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_character,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->LastCommand();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * character_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_character, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_itemtemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    itemtemplate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_itemtemplate",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (itemtemplate *)new itemtemplate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_itemtemplate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_itemtemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_itemtemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:itemtemplate_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:itemtemplate_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:itemtemplate_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:itemtemplate_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:itemtemplate_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:itemtemplate_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:itemtemplate_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:itemtemplate_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_IsQuantity(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:itemtemplate_IsQuantity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsQuantity();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_itemtemplate_GetQuantity(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    itemtemplate *arg1 = (itemtemplate *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:itemtemplate_GetQuantity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_itemtemplate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->GetQuantity();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * itemtemplate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_itemtemplate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_item(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    item *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_item",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (item *)new item(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_item, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_item(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_item",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_SetID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_SetName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_SetDescription",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetDescription((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_Room(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_Room",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->Room();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_SetRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetRoom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_Region(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_Region",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->Region();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_SetRegion",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetRegion(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_TemplateID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_TemplateID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->TemplateID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetTemplateID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_SetTemplateID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetTemplateID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:item_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:item_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_AddLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_AddLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->AddLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_AddExistingLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    Logic *arg2 = (Logic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_AddExistingLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Logic,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->AddExistingLogic(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_DelLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_DelLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->DelLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_GetLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    Logic *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_GetLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Logic *)(arg1)->GetLogic((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Logic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_HasLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_HasLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_DoAction__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    Action *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_DoAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Action,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->DoAction((Action const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_DoAction__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    entityid arg3 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    std::string *arg7 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:item_DoAction",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = (entityid) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj6)) {
            temp7 = std::string(PyString_AsString(obj6));
            arg7 = &temp7;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->DoAction((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_DoAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = (int)PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_item, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_Action, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_item_DoAction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_item, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = PyString_Check(argv[6]) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_item_DoAction__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'item_DoAction'");
    return NULL;
}


static PyObject *_wrap_item_GetLogicAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:item_GetLogicAttribute",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetLogicAttribute((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_AddHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_AddHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->AddHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_DelHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:item_DelHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DelHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_Hooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_Hooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Hooks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_KillHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:item_KillHook",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->KillHook((std::string const &)*arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_ClearHooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_ClearHooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ClearHooks();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_IsQuantity(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_IsQuantity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsQuantity();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_GetQuantity(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:item_GetQuantity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->GetQuantity();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_item_SetQuantity(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    item *arg1 = (item *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:item_SetQuantity",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_item,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetQuantity(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * item_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_item, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_portal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    portal *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_portal",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (portal *)new portal(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_portal, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_portal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_portal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SetID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_SetID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_SetName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SetDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_SetDescription",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetDescription((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_Region(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_Region",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->Region();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SetRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_SetRegion",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetRegion(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:portal_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:portal_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_AddLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_AddLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->AddLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_AddExistingLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    Logic *arg2 = (Logic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_AddExistingLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Logic,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->AddExistingLogic(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_DelLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_DelLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->DelLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_GetLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    Logic *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_GetLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Logic *)(arg1)->GetLogic((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Logic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_HasLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_HasLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_DoAction__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    Action *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_DoAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Action,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->DoAction((Action const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_DoAction__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    entityid arg3 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    std::string *arg7 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:portal_DoAction",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = (entityid) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj6)) {
            temp7 = std::string(PyString_AsString(obj6));
            arg7 = &temp7;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->DoAction((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_DoAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = (int)PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_portal, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_Action, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_portal_DoAction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_portal, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = PyString_Check(argv[6]) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_portal_DoAction__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'portal_DoAction'");
    return NULL;
}


static PyObject *_wrap_portal_GetLogicAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:portal_GetLogicAttribute",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetLogicAttribute((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_AddHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_AddHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->AddHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_DelHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_DelHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DelHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_Hooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_Hooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Hooks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_KillHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:portal_KillHook",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->KillHook((std::string const &)*arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_ClearHooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_ClearHooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ClearHooks();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_BeginPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_BeginPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginPath();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_CurrentStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_CurrentStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentStart();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_CurrentDirection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_CurrentDirection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->CurrentDirection();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_CurrentEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_CurrentEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentEnd();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_NextPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_NextPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextPath();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_IsValidPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:portal_IsValidPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidPath();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SeekStartRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_SeekStartRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SeekStartRoom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_portal_SeekEndRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    portal *arg1 = (portal *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:portal_SeekEndRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_portal,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SeekEndRoom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * portal_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_portal, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_region(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    region *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_region",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (region *)new region(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_region, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_region(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_region",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SetID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SetID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SetName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SetDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SetDescription",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetDescription((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddItem(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelItem(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Items(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Items",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Items();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_BeginItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_BeginItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_CurrentItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_CurrentItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_NextItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_NextItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_IsValidItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_IsValidItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SeekItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SeekItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekItem((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddCharacter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelCharacter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Characters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Characters",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Characters();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_BeginCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_BeginCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_CurrentCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_CurrentCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_NextCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_NextCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_IsValidCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_IsValidCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SeekCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SeekCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekCharacter((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddRoom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelRoom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Rooms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Rooms",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Rooms();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_BeginRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_BeginRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginRoom();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_CurrentRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_CurrentRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentRoom();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_NextRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_NextRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextRoom();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_IsValidRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_IsValidRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidRoom();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SeekRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SeekRoom",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekRoom((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_m_roomitr_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    region::rooms::iterator arg2 ;
    region::rooms::iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_m_roomitr_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_region__rooms__iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->m_roomitr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_m_roomitr_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    region::rooms::iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_m_roomitr_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->m_roomitr);
    
    {
        region::rooms::iterator * resultptr;
        resultptr = new region::rooms::iterator((region::rooms::iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_region__rooms__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddPortal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddPortal(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelPortal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelPortal(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Portals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Portals",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Portals();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_BeginPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_BeginPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginPortal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_CurrentPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_CurrentPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentPortal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_NextPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_NextPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextPortal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_IsValidPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_IsValidPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidPortal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SeekPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_SeekPortal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekPortal((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_m_portalitr_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    region::portals::iterator arg2 ;
    region::portals::iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_m_portalitr_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_region__portals__iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->m_portalitr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_m_portalitr_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    region::portals::iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_m_portalitr_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->m_portalitr);
    
    {
        region::portals::iterator * resultptr;
        resultptr = new region::portals::iterator((region::portals::iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_region__portals__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:region_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:region_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->AddLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddExistingLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    Logic *arg2 = (Logic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddExistingLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Logic,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->AddExistingLogic(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->DelLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_GetLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    Logic *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_GetLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Logic *)(arg1)->GetLogic((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Logic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_HasLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_HasLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DoAction__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    Action *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DoAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Action,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->DoAction((Action const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DoAction__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    entityid arg3 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    std::string *arg7 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:region_DoAction",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = (entityid) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj6)) {
            temp7 = std::string(PyString_AsString(obj6));
            arg7 = &temp7;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->DoAction((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DoAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = (int)PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_region, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_Action, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_region_DoAction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_region, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = PyString_Check(argv[6]) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_region_DoAction__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'region_DoAction'");
    return NULL;
}


static PyObject *_wrap_region_GetLogicAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:region_GetLogicAttribute",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetLogicAttribute((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_AddHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_AddHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->AddHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_DelHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:region_DelHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DelHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_Hooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_Hooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Hooks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_KillHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:region_KillHook",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->KillHook((std::string const &)*arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_region_ClearHooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    region *arg1 = (region *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:region_ClearHooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_region,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ClearHooks();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * region_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_region, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_room(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    entityid arg1 ;
    room *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_room",&obj0)) goto fail;
    arg1 = (entityid) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (room *)new room(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_room, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_room(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_room",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->ID();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Name();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Description",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Description();
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SetID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SetID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetID(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SetName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SetDescription(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SetDescription",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetDescription((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Region(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Region",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->Region();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SetRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SetRegion",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetRegion(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_AddItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddItem(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DelItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DelItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelItem(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Items(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Items",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Items();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_BeginItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_BeginItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_CurrentItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_CurrentItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_NextItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_NextItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_IsValidItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_IsValidItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SeekItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SeekItem",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekItem((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_AddCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddCharacter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DelCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DelCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelCharacter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Characters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Characters",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Characters();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_BeginCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_BeginCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_CurrentCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_CurrentCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_NextCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_NextCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_IsValidCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_IsValidCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SeekCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SeekCharacter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekCharacter((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_AddPortal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->AddPortal(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DelPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DelPortal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->DelPortal(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Portals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Portals",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Portals();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_BeginPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_BeginPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginPortal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_CurrentPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_CurrentPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentPortal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_NextPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_NextPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextPortal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_IsValidPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_IsValidPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidPortal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SeekPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_SeekPortal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SeekPortal((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_m_portalitr_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    room::portals::iterator arg2 ;
    room::portals::iterator *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_m_portalitr_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_room__portals__iterator,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->m_portalitr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_m_portalitr_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    room::portals::iterator result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_m_portalitr_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->m_portalitr);
    
    {
        room::portals::iterator * resultptr;
        resultptr = new room::portals::iterator((room::portals::iterator &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_room__portals__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_GetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_GetAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_SetAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:room_SetAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->SetAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_HasAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_HasAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasAttribute((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:room_AddAttribute",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddAttribute((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DelAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DelAttribute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DelAttribute((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_AddLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->AddLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddExistingLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    Logic *arg2 = (Logic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_AddExistingLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Logic,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->AddExistingLogic(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DelLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DelLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->DelLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_GetLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    Logic *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_GetLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Logic *)(arg1)->GetLogic((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Logic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_HasLogic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_HasLogic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->HasLogic((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DoAction__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    Action *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DoAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Action,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->DoAction((Action const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DoAction__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    entityid arg3 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    std::string *arg7 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:room_DoAction",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = (entityid) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj6)) {
            temp7 = std::string(PyString_AsString(obj6));
            arg7 = &temp7;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->DoAction((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DoAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = (int)PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_room, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_Action, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_room_DoAction__SWIG_0(self,args);
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_room, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = PyString_Check(argv[6]) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_room_DoAction__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'room_DoAction'");
    return NULL;
}


static PyObject *_wrap_room_GetLogicAttribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:room_GetLogicAttribute",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->GetLogicAttribute((std::string const &)*arg2,(std::string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_AddHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_AddHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->AddHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_DelHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    TimedAction *arg2 = (TimedAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:room_DelHook",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_TimedAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DelHook(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_Hooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_Hooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Hooks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_KillHook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:room_KillHook",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->KillHook((std::string const &)*arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_room_ClearHooks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    room *arg1 = (room *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:room_ClearHooks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_room,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ClearHooks();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * room_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_room, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_GameWrap_FindPlayerOnlinePart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    std::string *arg2 = 0 ;
    entityid result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GameWrap_FindPlayerOnlinePart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (entityid)(arg1)->FindPlayerOnlinePart((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_FindPlayerOnlineFull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    std::string *arg2 = 0 ;
    entityid result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GameWrap_FindPlayerOnlineFull",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (entityid)(arg1)->FindPlayerOnlineFull((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_FindPlayerPart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    std::string *arg2 = 0 ;
    entityid result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GameWrap_FindPlayerPart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (entityid)(arg1)->FindPlayerPart((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_FindPlayerFull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    std::string *arg2 = 0 ;
    entityid result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GameWrap_FindPlayerFull",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (entityid)(arg1)->FindPlayerFull((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_HasPlayer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GameWrap_HasPlayer",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (entityid) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->HasPlayer(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Running(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Running",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->Running();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_ShutDown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_ShutDown",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ShutDown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_GetTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    BasicLib::sint64 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_GetTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (BasicLib::sint64)(arg1)->GetTime();
    
    resultobj = PyLong_FromLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_ResetTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_ResetTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ResetTime();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_DoAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    std::string *arg2 = 0 ;
    entityid arg3 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    std::string *arg7 = 0 ;
    std::string temp2 ;
    std::string temp7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:GameWrap_DoAction",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg3 = (entityid) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj6)) {
            temp7 = std::string(PyString_AsString(obj6));
            arg7 = &temp7;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->DoAction((std::string const &)*arg2,arg3,arg4,arg5,arg6,(std::string const &)*arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_AddActionRelative(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    BasicLib::sint64 arg2 ;
    std::string *arg3 = 0 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    entityid arg7 ;
    std::string *arg8 = 0 ;
    std::string temp3 ;
    std::string temp8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:GameWrap_AddActionRelative",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (BasicLib::sint64) PyLong_AsLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (entityid) PyInt_AsLong(obj6);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj7)) {
            temp8 = std::string(PyString_AsString(obj7));
            arg8 = &temp8;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddActionRelative(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_AddActionAbsolute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    BasicLib::sint64 arg2 ;
    std::string *arg3 = 0 ;
    entityid arg4 ;
    entityid arg5 ;
    entityid arg6 ;
    entityid arg7 ;
    std::string *arg8 = 0 ;
    std::string temp3 ;
    std::string temp8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:GameWrap_AddActionAbsolute",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (BasicLib::sint64) PyLong_AsLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg4 = (entityid) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (entityid) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = (entityid) PyInt_AsLong(obj5);
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = (entityid) PyInt_AsLong(obj6);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj7)) {
            temp8 = std::string(PyString_AsString(obj7));
            arg8 = &temp8;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->AddActionAbsolute(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Characters(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Characters",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Characters();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextCharacter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidCharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidCharacter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidCharacter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CharacterTemplates(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CharacterTemplates",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->CharacterTemplates();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginCharacterTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginCharacterTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginCharacterTemplate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentCharacterTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentCharacterTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentCharacterTemplate();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextCharacterTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextCharacterTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextCharacterTemplate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidCharacterTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidCharacterTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidCharacterTemplate();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Items(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Items",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Items();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextItem();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidItem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidItem();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_ItemTemplates(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_ItemTemplates",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->ItemTemplates();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginItemTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginItemTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginItemTemplate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentItemTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentItemTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentItemTemplate();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextItemTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextItemTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextItemTemplate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidItemTemplate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidItemTemplate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidItemTemplate();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Rooms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Rooms",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Rooms();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginRoom();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentRoom();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextRoom();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidRoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidRoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidRoom();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Regions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Regions",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Regions();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginRegion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginRegion();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentRegion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentRegion();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextRegion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextRegion();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidRegion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidRegion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidRegion();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Portals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Portals",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Portals();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginPortal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentPortal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextPortal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidPortal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidPortal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidPortal();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_Accounts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_Accounts",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Accounts();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_BeginAccount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_BeginAccount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->BeginAccount();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_CurrentAccount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    entityid result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_CurrentAccount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (entityid)(arg1)->CurrentAccount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_NextAccount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_NextAccount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->NextAccount();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GameWrap_IsValidAccount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GameWrap_IsValidAccount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsValidAccount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GameWrap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GameWrap")) goto fail;
    result = (GameWrap *)new GameWrap();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_GameWrap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GameWrap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GameWrap *arg1 = (GameWrap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GameWrap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GameWrap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GameWrap_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GameWrap, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_account", _wrap_new_account, METH_VARARGS },
	 { (char *)"delete_account", _wrap_delete_account, METH_VARARGS },
	 { (char *)"account_ID", _wrap_account_ID, METH_VARARGS },
	 { (char *)"account_Name", _wrap_account_Name, METH_VARARGS },
	 { (char *)"account_Description", _wrap_account_Description, METH_VARARGS },
	 { (char *)"account_SetID", _wrap_account_SetID, METH_VARARGS },
	 { (char *)"account_SetName", _wrap_account_SetName, METH_VARARGS },
	 { (char *)"account_SetDescription", _wrap_account_SetDescription, METH_VARARGS },
	 { (char *)"account_AddCharacter", _wrap_account_AddCharacter, METH_VARARGS },
	 { (char *)"account_DelCharacter", _wrap_account_DelCharacter, METH_VARARGS },
	 { (char *)"account_Characters", _wrap_account_Characters, METH_VARARGS },
	 { (char *)"account_BeginCharacter", _wrap_account_BeginCharacter, METH_VARARGS },
	 { (char *)"account_CurrentCharacter", _wrap_account_CurrentCharacter, METH_VARARGS },
	 { (char *)"account_NextCharacter", _wrap_account_NextCharacter, METH_VARARGS },
	 { (char *)"account_IsValidCharacter", _wrap_account_IsValidCharacter, METH_VARARGS },
	 { (char *)"account_SeekCharacter", _wrap_account_SeekCharacter, METH_VARARGS },
	 { (char *)"account_Password", _wrap_account_Password, METH_VARARGS },
	 { (char *)"account_LoginTime", _wrap_account_LoginTime, METH_VARARGS },
	 { (char *)"account_AccessLevel", _wrap_account_AccessLevel, METH_VARARGS },
	 { (char *)"account_Banned", _wrap_account_Banned, METH_VARARGS },
	 { (char *)"account_AllowedCharacters", _wrap_account_AllowedCharacters, METH_VARARGS },
	 { (char *)"account_SetPass", _wrap_account_SetPass, METH_VARARGS },
	 { (char *)"account_SetLoginTime", _wrap_account_SetLoginTime, METH_VARARGS },
	 { (char *)"account_SetAccessLevel", _wrap_account_SetAccessLevel, METH_VARARGS },
	 { (char *)"account_SetBanned", _wrap_account_SetBanned, METH_VARARGS },
	 { (char *)"account_SetAllowedCharacters", _wrap_account_SetAllowedCharacters, METH_VARARGS },
	 { (char *)"account_swigregister", account_swigregister, METH_VARARGS },
	 { (char *)"new_charactertemplate", _wrap_new_charactertemplate, METH_VARARGS },
	 { (char *)"delete_charactertemplate", _wrap_delete_charactertemplate, METH_VARARGS },
	 { (char *)"charactertemplate_ID", _wrap_charactertemplate_ID, METH_VARARGS },
	 { (char *)"charactertemplate_Name", _wrap_charactertemplate_Name, METH_VARARGS },
	 { (char *)"charactertemplate_Description", _wrap_charactertemplate_Description, METH_VARARGS },
	 { (char *)"charactertemplate_GetAttribute", _wrap_charactertemplate_GetAttribute, METH_VARARGS },
	 { (char *)"charactertemplate_SetAttribute", _wrap_charactertemplate_SetAttribute, METH_VARARGS },
	 { (char *)"charactertemplate_HasAttribute", _wrap_charactertemplate_HasAttribute, METH_VARARGS },
	 { (char *)"charactertemplate_AddAttribute", _wrap_charactertemplate_AddAttribute, METH_VARARGS },
	 { (char *)"charactertemplate_DelAttribute", _wrap_charactertemplate_DelAttribute, METH_VARARGS },
	 { (char *)"charactertemplate_swigregister", charactertemplate_swigregister, METH_VARARGS },
	 { (char *)"new_character", _wrap_new_character, METH_VARARGS },
	 { (char *)"delete_character", _wrap_delete_character, METH_VARARGS },
	 { (char *)"character_ID", _wrap_character_ID, METH_VARARGS },
	 { (char *)"character_Name", _wrap_character_Name, METH_VARARGS },
	 { (char *)"character_Description", _wrap_character_Description, METH_VARARGS },
	 { (char *)"character_SetID", _wrap_character_SetID, METH_VARARGS },
	 { (char *)"character_SetName", _wrap_character_SetName, METH_VARARGS },
	 { (char *)"character_SetDescription", _wrap_character_SetDescription, METH_VARARGS },
	 { (char *)"character_Room", _wrap_character_Room, METH_VARARGS },
	 { (char *)"character_SetRoom", _wrap_character_SetRoom, METH_VARARGS },
	 { (char *)"character_Region", _wrap_character_Region, METH_VARARGS },
	 { (char *)"character_SetRegion", _wrap_character_SetRegion, METH_VARARGS },
	 { (char *)"character_TemplateID", _wrap_character_TemplateID, METH_VARARGS },
	 { (char *)"character_SetTemplateID", _wrap_character_SetTemplateID, METH_VARARGS },
	 { (char *)"character_AddItem", _wrap_character_AddItem, METH_VARARGS },
	 { (char *)"character_DelItem", _wrap_character_DelItem, METH_VARARGS },
	 { (char *)"character_Items", _wrap_character_Items, METH_VARARGS },
	 { (char *)"character_BeginItem", _wrap_character_BeginItem, METH_VARARGS },
	 { (char *)"character_CurrentItem", _wrap_character_CurrentItem, METH_VARARGS },
	 { (char *)"character_NextItem", _wrap_character_NextItem, METH_VARARGS },
	 { (char *)"character_IsValidItem", _wrap_character_IsValidItem, METH_VARARGS },
	 { (char *)"character_SeekItem", _wrap_character_SeekItem, METH_VARARGS },
	 { (char *)"character_GetAttribute", _wrap_character_GetAttribute, METH_VARARGS },
	 { (char *)"character_SetAttribute", _wrap_character_SetAttribute, METH_VARARGS },
	 { (char *)"character_HasAttribute", _wrap_character_HasAttribute, METH_VARARGS },
	 { (char *)"character_AddAttribute", _wrap_character_AddAttribute, METH_VARARGS },
	 { (char *)"character_DelAttribute", _wrap_character_DelAttribute, METH_VARARGS },
	 { (char *)"character_AddLogic", _wrap_character_AddLogic, METH_VARARGS },
	 { (char *)"character_AddExistingLogic", _wrap_character_AddExistingLogic, METH_VARARGS },
	 { (char *)"character_DelLogic", _wrap_character_DelLogic, METH_VARARGS },
	 { (char *)"character_GetLogic", _wrap_character_GetLogic, METH_VARARGS },
	 { (char *)"character_HasLogic", _wrap_character_HasLogic, METH_VARARGS },
	 { (char *)"character_DoAction", _wrap_character_DoAction, METH_VARARGS },
	 { (char *)"character_GetLogicAttribute", _wrap_character_GetLogicAttribute, METH_VARARGS },
	 { (char *)"character_AddHook", _wrap_character_AddHook, METH_VARARGS },
	 { (char *)"character_DelHook", _wrap_character_DelHook, METH_VARARGS },
	 { (char *)"character_Hooks", _wrap_character_Hooks, METH_VARARGS },
	 { (char *)"character_KillHook", _wrap_character_KillHook, METH_VARARGS },
	 { (char *)"character_ClearHooks", _wrap_character_ClearHooks, METH_VARARGS },
	 { (char *)"character_HasCommand", _wrap_character_HasCommand, METH_VARARGS },
	 { (char *)"character_AddCommand", _wrap_character_AddCommand, METH_VARARGS },
	 { (char *)"character_DelCommand", _wrap_character_DelCommand, METH_VARARGS },
	 { (char *)"character_BeginCommands", _wrap_character_BeginCommands, METH_VARARGS },
	 { (char *)"character_CurrentCommand", _wrap_character_CurrentCommand, METH_VARARGS },
	 { (char *)"character_CurrentCommandUsage", _wrap_character_CurrentCommandUsage, METH_VARARGS },
	 { (char *)"character_CurrentCommandDescription", _wrap_character_CurrentCommandDescription, METH_VARARGS },
	 { (char *)"character_NextCommand", _wrap_character_NextCommand, METH_VARARGS },
	 { (char *)"character_IsValidCommand", _wrap_character_IsValidCommand, METH_VARARGS },
	 { (char *)"character_SeekCommand", _wrap_character_SeekCommand, METH_VARARGS },
	 { (char *)"character_Quiet", _wrap_character_Quiet, METH_VARARGS },
	 { (char *)"character_IsPlayer", _wrap_character_IsPlayer, METH_VARARGS },
	 { (char *)"character_Verbose", _wrap_character_Verbose, METH_VARARGS },
	 { (char *)"character_GetAccount", _wrap_character_GetAccount, METH_VARARGS },
	 { (char *)"character_SetQuiet", _wrap_character_SetQuiet, METH_VARARGS },
	 { (char *)"character_SetAccount", _wrap_character_SetAccount, METH_VARARGS },
	 { (char *)"character_IsLoggedIn", _wrap_character_IsLoggedIn, METH_VARARGS },
	 { (char *)"character_LastCommand", _wrap_character_LastCommand, METH_VARARGS },
	 { (char *)"character_swigregister", character_swigregister, METH_VARARGS },
	 { (char *)"new_itemtemplate", _wrap_new_itemtemplate, METH_VARARGS },
	 { (char *)"delete_itemtemplate", _wrap_delete_itemtemplate, METH_VARARGS },
	 { (char *)"itemtemplate_ID", _wrap_itemtemplate_ID, METH_VARARGS },
	 { (char *)"itemtemplate_Name", _wrap_itemtemplate_Name, METH_VARARGS },
	 { (char *)"itemtemplate_Description", _wrap_itemtemplate_Description, METH_VARARGS },
	 { (char *)"itemtemplate_GetAttribute", _wrap_itemtemplate_GetAttribute, METH_VARARGS },
	 { (char *)"itemtemplate_SetAttribute", _wrap_itemtemplate_SetAttribute, METH_VARARGS },
	 { (char *)"itemtemplate_HasAttribute", _wrap_itemtemplate_HasAttribute, METH_VARARGS },
	 { (char *)"itemtemplate_AddAttribute", _wrap_itemtemplate_AddAttribute, METH_VARARGS },
	 { (char *)"itemtemplate_DelAttribute", _wrap_itemtemplate_DelAttribute, METH_VARARGS },
	 { (char *)"itemtemplate_IsQuantity", _wrap_itemtemplate_IsQuantity, METH_VARARGS },
	 { (char *)"itemtemplate_GetQuantity", _wrap_itemtemplate_GetQuantity, METH_VARARGS },
	 { (char *)"itemtemplate_swigregister", itemtemplate_swigregister, METH_VARARGS },
	 { (char *)"new_item", _wrap_new_item, METH_VARARGS },
	 { (char *)"delete_item", _wrap_delete_item, METH_VARARGS },
	 { (char *)"item_ID", _wrap_item_ID, METH_VARARGS },
	 { (char *)"item_Name", _wrap_item_Name, METH_VARARGS },
	 { (char *)"item_Description", _wrap_item_Description, METH_VARARGS },
	 { (char *)"item_SetID", _wrap_item_SetID, METH_VARARGS },
	 { (char *)"item_SetName", _wrap_item_SetName, METH_VARARGS },
	 { (char *)"item_SetDescription", _wrap_item_SetDescription, METH_VARARGS },
	 { (char *)"item_Room", _wrap_item_Room, METH_VARARGS },
	 { (char *)"item_SetRoom", _wrap_item_SetRoom, METH_VARARGS },
	 { (char *)"item_Region", _wrap_item_Region, METH_VARARGS },
	 { (char *)"item_SetRegion", _wrap_item_SetRegion, METH_VARARGS },
	 { (char *)"item_TemplateID", _wrap_item_TemplateID, METH_VARARGS },
	 { (char *)"item_SetTemplateID", _wrap_item_SetTemplateID, METH_VARARGS },
	 { (char *)"item_GetAttribute", _wrap_item_GetAttribute, METH_VARARGS },
	 { (char *)"item_SetAttribute", _wrap_item_SetAttribute, METH_VARARGS },
	 { (char *)"item_HasAttribute", _wrap_item_HasAttribute, METH_VARARGS },
	 { (char *)"item_AddAttribute", _wrap_item_AddAttribute, METH_VARARGS },
	 { (char *)"item_DelAttribute", _wrap_item_DelAttribute, METH_VARARGS },
	 { (char *)"item_AddLogic", _wrap_item_AddLogic, METH_VARARGS },
	 { (char *)"item_AddExistingLogic", _wrap_item_AddExistingLogic, METH_VARARGS },
	 { (char *)"item_DelLogic", _wrap_item_DelLogic, METH_VARARGS },
	 { (char *)"item_GetLogic", _wrap_item_GetLogic, METH_VARARGS },
	 { (char *)"item_HasLogic", _wrap_item_HasLogic, METH_VARARGS },
	 { (char *)"item_DoAction", _wrap_item_DoAction, METH_VARARGS },
	 { (char *)"item_GetLogicAttribute", _wrap_item_GetLogicAttribute, METH_VARARGS },
	 { (char *)"item_AddHook", _wrap_item_AddHook, METH_VARARGS },
	 { (char *)"item_DelHook", _wrap_item_DelHook, METH_VARARGS },
	 { (char *)"item_Hooks", _wrap_item_Hooks, METH_VARARGS },
	 { (char *)"item_KillHook", _wrap_item_KillHook, METH_VARARGS },
	 { (char *)"item_ClearHooks", _wrap_item_ClearHooks, METH_VARARGS },
	 { (char *)"item_IsQuantity", _wrap_item_IsQuantity, METH_VARARGS },
	 { (char *)"item_GetQuantity", _wrap_item_GetQuantity, METH_VARARGS },
	 { (char *)"item_SetQuantity", _wrap_item_SetQuantity, METH_VARARGS },
	 { (char *)"item_swigregister", item_swigregister, METH_VARARGS },
	 { (char *)"new_portal", _wrap_new_portal, METH_VARARGS },
	 { (char *)"delete_portal", _wrap_delete_portal, METH_VARARGS },
	 { (char *)"portal_ID", _wrap_portal_ID, METH_VARARGS },
	 { (char *)"portal_Name", _wrap_portal_Name, METH_VARARGS },
	 { (char *)"portal_Description", _wrap_portal_Description, METH_VARARGS },
	 { (char *)"portal_SetID", _wrap_portal_SetID, METH_VARARGS },
	 { (char *)"portal_SetName", _wrap_portal_SetName, METH_VARARGS },
	 { (char *)"portal_SetDescription", _wrap_portal_SetDescription, METH_VARARGS },
	 { (char *)"portal_Region", _wrap_portal_Region, METH_VARARGS },
	 { (char *)"portal_SetRegion", _wrap_portal_SetRegion, METH_VARARGS },
	 { (char *)"portal_GetAttribute", _wrap_portal_GetAttribute, METH_VARARGS },
	 { (char *)"portal_SetAttribute", _wrap_portal_SetAttribute, METH_VARARGS },
	 { (char *)"portal_HasAttribute", _wrap_portal_HasAttribute, METH_VARARGS },
	 { (char *)"portal_AddAttribute", _wrap_portal_AddAttribute, METH_VARARGS },
	 { (char *)"portal_DelAttribute", _wrap_portal_DelAttribute, METH_VARARGS },
	 { (char *)"portal_AddLogic", _wrap_portal_AddLogic, METH_VARARGS },
	 { (char *)"portal_AddExistingLogic", _wrap_portal_AddExistingLogic, METH_VARARGS },
	 { (char *)"portal_DelLogic", _wrap_portal_DelLogic, METH_VARARGS },
	 { (char *)"portal_GetLogic", _wrap_portal_GetLogic, METH_VARARGS },
	 { (char *)"portal_HasLogic", _wrap_portal_HasLogic, METH_VARARGS },
	 { (char *)"portal_DoAction", _wrap_portal_DoAction, METH_VARARGS },
	 { (char *)"portal_GetLogicAttribute", _wrap_portal_GetLogicAttribute, METH_VARARGS },
	 { (char *)"portal_AddHook", _wrap_portal_AddHook, METH_VARARGS },
	 { (char *)"portal_DelHook", _wrap_portal_DelHook, METH_VARARGS },
	 { (char *)"portal_Hooks", _wrap_portal_Hooks, METH_VARARGS },
	 { (char *)"portal_KillHook", _wrap_portal_KillHook, METH_VARARGS },
	 { (char *)"portal_ClearHooks", _wrap_portal_ClearHooks, METH_VARARGS },
	 { (char *)"portal_BeginPath", _wrap_portal_BeginPath, METH_VARARGS },
	 { (char *)"portal_CurrentStart", _wrap_portal_CurrentStart, METH_VARARGS },
	 { (char *)"portal_CurrentDirection", _wrap_portal_CurrentDirection, METH_VARARGS },
	 { (char *)"portal_CurrentEnd", _wrap_portal_CurrentEnd, METH_VARARGS },
	 { (char *)"portal_NextPath", _wrap_portal_NextPath, METH_VARARGS },
	 { (char *)"portal_IsValidPath", _wrap_portal_IsValidPath, METH_VARARGS },
	 { (char *)"portal_SeekStartRoom", _wrap_portal_SeekStartRoom, METH_VARARGS },
	 { (char *)"portal_SeekEndRoom", _wrap_portal_SeekEndRoom, METH_VARARGS },
	 { (char *)"portal_swigregister", portal_swigregister, METH_VARARGS },
	 { (char *)"new_region", _wrap_new_region, METH_VARARGS },
	 { (char *)"delete_region", _wrap_delete_region, METH_VARARGS },
	 { (char *)"region_ID", _wrap_region_ID, METH_VARARGS },
	 { (char *)"region_Name", _wrap_region_Name, METH_VARARGS },
	 { (char *)"region_Description", _wrap_region_Description, METH_VARARGS },
	 { (char *)"region_SetID", _wrap_region_SetID, METH_VARARGS },
	 { (char *)"region_SetName", _wrap_region_SetName, METH_VARARGS },
	 { (char *)"region_SetDescription", _wrap_region_SetDescription, METH_VARARGS },
	 { (char *)"region_AddItem", _wrap_region_AddItem, METH_VARARGS },
	 { (char *)"region_DelItem", _wrap_region_DelItem, METH_VARARGS },
	 { (char *)"region_Items", _wrap_region_Items, METH_VARARGS },
	 { (char *)"region_BeginItem", _wrap_region_BeginItem, METH_VARARGS },
	 { (char *)"region_CurrentItem", _wrap_region_CurrentItem, METH_VARARGS },
	 { (char *)"region_NextItem", _wrap_region_NextItem, METH_VARARGS },
	 { (char *)"region_IsValidItem", _wrap_region_IsValidItem, METH_VARARGS },
	 { (char *)"region_SeekItem", _wrap_region_SeekItem, METH_VARARGS },
	 { (char *)"region_AddCharacter", _wrap_region_AddCharacter, METH_VARARGS },
	 { (char *)"region_DelCharacter", _wrap_region_DelCharacter, METH_VARARGS },
	 { (char *)"region_Characters", _wrap_region_Characters, METH_VARARGS },
	 { (char *)"region_BeginCharacter", _wrap_region_BeginCharacter, METH_VARARGS },
	 { (char *)"region_CurrentCharacter", _wrap_region_CurrentCharacter, METH_VARARGS },
	 { (char *)"region_NextCharacter", _wrap_region_NextCharacter, METH_VARARGS },
	 { (char *)"region_IsValidCharacter", _wrap_region_IsValidCharacter, METH_VARARGS },
	 { (char *)"region_SeekCharacter", _wrap_region_SeekCharacter, METH_VARARGS },
	 { (char *)"region_AddRoom", _wrap_region_AddRoom, METH_VARARGS },
	 { (char *)"region_DelRoom", _wrap_region_DelRoom, METH_VARARGS },
	 { (char *)"region_Rooms", _wrap_region_Rooms, METH_VARARGS },
	 { (char *)"region_BeginRoom", _wrap_region_BeginRoom, METH_VARARGS },
	 { (char *)"region_CurrentRoom", _wrap_region_CurrentRoom, METH_VARARGS },
	 { (char *)"region_NextRoom", _wrap_region_NextRoom, METH_VARARGS },
	 { (char *)"region_IsValidRoom", _wrap_region_IsValidRoom, METH_VARARGS },
	 { (char *)"region_SeekRoom", _wrap_region_SeekRoom, METH_VARARGS },
	 { (char *)"region_m_roomitr_set", _wrap_region_m_roomitr_set, METH_VARARGS },
	 { (char *)"region_m_roomitr_get", _wrap_region_m_roomitr_get, METH_VARARGS },
	 { (char *)"region_AddPortal", _wrap_region_AddPortal, METH_VARARGS },
	 { (char *)"region_DelPortal", _wrap_region_DelPortal, METH_VARARGS },
	 { (char *)"region_Portals", _wrap_region_Portals, METH_VARARGS },
	 { (char *)"region_BeginPortal", _wrap_region_BeginPortal, METH_VARARGS },
	 { (char *)"region_CurrentPortal", _wrap_region_CurrentPortal, METH_VARARGS },
	 { (char *)"region_NextPortal", _wrap_region_NextPortal, METH_VARARGS },
	 { (char *)"region_IsValidPortal", _wrap_region_IsValidPortal, METH_VARARGS },
	 { (char *)"region_SeekPortal", _wrap_region_SeekPortal, METH_VARARGS },
	 { (char *)"region_m_portalitr_set", _wrap_region_m_portalitr_set, METH_VARARGS },
	 { (char *)"region_m_portalitr_get", _wrap_region_m_portalitr_get, METH_VARARGS },
	 { (char *)"region_GetAttribute", _wrap_region_GetAttribute, METH_VARARGS },
	 { (char *)"region_SetAttribute", _wrap_region_SetAttribute, METH_VARARGS },
	 { (char *)"region_HasAttribute", _wrap_region_HasAttribute, METH_VARARGS },
	 { (char *)"region_AddAttribute", _wrap_region_AddAttribute, METH_VARARGS },
	 { (char *)"region_DelAttribute", _wrap_region_DelAttribute, METH_VARARGS },
	 { (char *)"region_AddLogic", _wrap_region_AddLogic, METH_VARARGS },
	 { (char *)"region_AddExistingLogic", _wrap_region_AddExistingLogic, METH_VARARGS },
	 { (char *)"region_DelLogic", _wrap_region_DelLogic, METH_VARARGS },
	 { (char *)"region_GetLogic", _wrap_region_GetLogic, METH_VARARGS },
	 { (char *)"region_HasLogic", _wrap_region_HasLogic, METH_VARARGS },
	 { (char *)"region_DoAction", _wrap_region_DoAction, METH_VARARGS },
	 { (char *)"region_GetLogicAttribute", _wrap_region_GetLogicAttribute, METH_VARARGS },
	 { (char *)"region_AddHook", _wrap_region_AddHook, METH_VARARGS },
	 { (char *)"region_DelHook", _wrap_region_DelHook, METH_VARARGS },
	 { (char *)"region_Hooks", _wrap_region_Hooks, METH_VARARGS },
	 { (char *)"region_KillHook", _wrap_region_KillHook, METH_VARARGS },
	 { (char *)"region_ClearHooks", _wrap_region_ClearHooks, METH_VARARGS },
	 { (char *)"region_swigregister", region_swigregister, METH_VARARGS },
	 { (char *)"new_room", _wrap_new_room, METH_VARARGS },
	 { (char *)"delete_room", _wrap_delete_room, METH_VARARGS },
	 { (char *)"room_ID", _wrap_room_ID, METH_VARARGS },
	 { (char *)"room_Name", _wrap_room_Name, METH_VARARGS },
	 { (char *)"room_Description", _wrap_room_Description, METH_VARARGS },
	 { (char *)"room_SetID", _wrap_room_SetID, METH_VARARGS },
	 { (char *)"room_SetName", _wrap_room_SetName, METH_VARARGS },
	 { (char *)"room_SetDescription", _wrap_room_SetDescription, METH_VARARGS },
	 { (char *)"room_Region", _wrap_room_Region, METH_VARARGS },
	 { (char *)"room_SetRegion", _wrap_room_SetRegion, METH_VARARGS },
	 { (char *)"room_AddItem", _wrap_room_AddItem, METH_VARARGS },
	 { (char *)"room_DelItem", _wrap_room_DelItem, METH_VARARGS },
	 { (char *)"room_Items", _wrap_room_Items, METH_VARARGS },
	 { (char *)"room_BeginItem", _wrap_room_BeginItem, METH_VARARGS },
	 { (char *)"room_CurrentItem", _wrap_room_CurrentItem, METH_VARARGS },
	 { (char *)"room_NextItem", _wrap_room_NextItem, METH_VARARGS },
	 { (char *)"room_IsValidItem", _wrap_room_IsValidItem, METH_VARARGS },
	 { (char *)"room_SeekItem", _wrap_room_SeekItem, METH_VARARGS },
	 { (char *)"room_AddCharacter", _wrap_room_AddCharacter, METH_VARARGS },
	 { (char *)"room_DelCharacter", _wrap_room_DelCharacter, METH_VARARGS },
	 { (char *)"room_Characters", _wrap_room_Characters, METH_VARARGS },
	 { (char *)"room_BeginCharacter", _wrap_room_BeginCharacter, METH_VARARGS },
	 { (char *)"room_CurrentCharacter", _wrap_room_CurrentCharacter, METH_VARARGS },
	 { (char *)"room_NextCharacter", _wrap_room_NextCharacter, METH_VARARGS },
	 { (char *)"room_IsValidCharacter", _wrap_room_IsValidCharacter, METH_VARARGS },
	 { (char *)"room_SeekCharacter", _wrap_room_SeekCharacter, METH_VARARGS },
	 { (char *)"room_AddPortal", _wrap_room_AddPortal, METH_VARARGS },
	 { (char *)"room_DelPortal", _wrap_room_DelPortal, METH_VARARGS },
	 { (char *)"room_Portals", _wrap_room_Portals, METH_VARARGS },
	 { (char *)"room_BeginPortal", _wrap_room_BeginPortal, METH_VARARGS },
	 { (char *)"room_CurrentPortal", _wrap_room_CurrentPortal, METH_VARARGS },
	 { (char *)"room_NextPortal", _wrap_room_NextPortal, METH_VARARGS },
	 { (char *)"room_IsValidPortal", _wrap_room_IsValidPortal, METH_VARARGS },
	 { (char *)"room_SeekPortal", _wrap_room_SeekPortal, METH_VARARGS },
	 { (char *)"room_m_portalitr_set", _wrap_room_m_portalitr_set, METH_VARARGS },
	 { (char *)"room_m_portalitr_get", _wrap_room_m_portalitr_get, METH_VARARGS },
	 { (char *)"room_GetAttribute", _wrap_room_GetAttribute, METH_VARARGS },
	 { (char *)"room_SetAttribute", _wrap_room_SetAttribute, METH_VARARGS },
	 { (char *)"room_HasAttribute", _wrap_room_HasAttribute, METH_VARARGS },
	 { (char *)"room_AddAttribute", _wrap_room_AddAttribute, METH_VARARGS },
	 { (char *)"room_DelAttribute", _wrap_room_DelAttribute, METH_VARARGS },
	 { (char *)"room_AddLogic", _wrap_room_AddLogic, METH_VARARGS },
	 { (char *)"room_AddExistingLogic", _wrap_room_AddExistingLogic, METH_VARARGS },
	 { (char *)"room_DelLogic", _wrap_room_DelLogic, METH_VARARGS },
	 { (char *)"room_GetLogic", _wrap_room_GetLogic, METH_VARARGS },
	 { (char *)"room_HasLogic", _wrap_room_HasLogic, METH_VARARGS },
	 { (char *)"room_DoAction", _wrap_room_DoAction, METH_VARARGS },
	 { (char *)"room_GetLogicAttribute", _wrap_room_GetLogicAttribute, METH_VARARGS },
	 { (char *)"room_AddHook", _wrap_room_AddHook, METH_VARARGS },
	 { (char *)"room_DelHook", _wrap_room_DelHook, METH_VARARGS },
	 { (char *)"room_Hooks", _wrap_room_Hooks, METH_VARARGS },
	 { (char *)"room_KillHook", _wrap_room_KillHook, METH_VARARGS },
	 { (char *)"room_ClearHooks", _wrap_room_ClearHooks, METH_VARARGS },
	 { (char *)"room_swigregister", room_swigregister, METH_VARARGS },
	 { (char *)"GameWrap_FindPlayerOnlinePart", _wrap_GameWrap_FindPlayerOnlinePart, METH_VARARGS },
	 { (char *)"GameWrap_FindPlayerOnlineFull", _wrap_GameWrap_FindPlayerOnlineFull, METH_VARARGS },
	 { (char *)"GameWrap_FindPlayerPart", _wrap_GameWrap_FindPlayerPart, METH_VARARGS },
	 { (char *)"GameWrap_FindPlayerFull", _wrap_GameWrap_FindPlayerFull, METH_VARARGS },
	 { (char *)"GameWrap_HasPlayer", _wrap_GameWrap_HasPlayer, METH_VARARGS },
	 { (char *)"GameWrap_Running", _wrap_GameWrap_Running, METH_VARARGS },
	 { (char *)"GameWrap_ShutDown", _wrap_GameWrap_ShutDown, METH_VARARGS },
	 { (char *)"GameWrap_GetTime", _wrap_GameWrap_GetTime, METH_VARARGS },
	 { (char *)"GameWrap_ResetTime", _wrap_GameWrap_ResetTime, METH_VARARGS },
	 { (char *)"GameWrap_DoAction", _wrap_GameWrap_DoAction, METH_VARARGS },
	 { (char *)"GameWrap_AddActionRelative", _wrap_GameWrap_AddActionRelative, METH_VARARGS },
	 { (char *)"GameWrap_AddActionAbsolute", _wrap_GameWrap_AddActionAbsolute, METH_VARARGS },
	 { (char *)"GameWrap_Characters", _wrap_GameWrap_Characters, METH_VARARGS },
	 { (char *)"GameWrap_BeginCharacter", _wrap_GameWrap_BeginCharacter, METH_VARARGS },
	 { (char *)"GameWrap_CurrentCharacter", _wrap_GameWrap_CurrentCharacter, METH_VARARGS },
	 { (char *)"GameWrap_NextCharacter", _wrap_GameWrap_NextCharacter, METH_VARARGS },
	 { (char *)"GameWrap_IsValidCharacter", _wrap_GameWrap_IsValidCharacter, METH_VARARGS },
	 { (char *)"GameWrap_CharacterTemplates", _wrap_GameWrap_CharacterTemplates, METH_VARARGS },
	 { (char *)"GameWrap_BeginCharacterTemplate", _wrap_GameWrap_BeginCharacterTemplate, METH_VARARGS },
	 { (char *)"GameWrap_CurrentCharacterTemplate", _wrap_GameWrap_CurrentCharacterTemplate, METH_VARARGS },
	 { (char *)"GameWrap_NextCharacterTemplate", _wrap_GameWrap_NextCharacterTemplate, METH_VARARGS },
	 { (char *)"GameWrap_IsValidCharacterTemplate", _wrap_GameWrap_IsValidCharacterTemplate, METH_VARARGS },
	 { (char *)"GameWrap_Items", _wrap_GameWrap_Items, METH_VARARGS },
	 { (char *)"GameWrap_BeginItem", _wrap_GameWrap_BeginItem, METH_VARARGS },
	 { (char *)"GameWrap_CurrentItem", _wrap_GameWrap_CurrentItem, METH_VARARGS },
	 { (char *)"GameWrap_NextItem", _wrap_GameWrap_NextItem, METH_VARARGS },
	 { (char *)"GameWrap_IsValidItem", _wrap_GameWrap_IsValidItem, METH_VARARGS },
	 { (char *)"GameWrap_ItemTemplates", _wrap_GameWrap_ItemTemplates, METH_VARARGS },
	 { (char *)"GameWrap_BeginItemTemplate", _wrap_GameWrap_BeginItemTemplate, METH_VARARGS },
	 { (char *)"GameWrap_CurrentItemTemplate", _wrap_GameWrap_CurrentItemTemplate, METH_VARARGS },
	 { (char *)"GameWrap_NextItemTemplate", _wrap_GameWrap_NextItemTemplate, METH_VARARGS },
	 { (char *)"GameWrap_IsValidItemTemplate", _wrap_GameWrap_IsValidItemTemplate, METH_VARARGS },
	 { (char *)"GameWrap_Rooms", _wrap_GameWrap_Rooms, METH_VARARGS },
	 { (char *)"GameWrap_BeginRoom", _wrap_GameWrap_BeginRoom, METH_VARARGS },
	 { (char *)"GameWrap_CurrentRoom", _wrap_GameWrap_CurrentRoom, METH_VARARGS },
	 { (char *)"GameWrap_NextRoom", _wrap_GameWrap_NextRoom, METH_VARARGS },
	 { (char *)"GameWrap_IsValidRoom", _wrap_GameWrap_IsValidRoom, METH_VARARGS },
	 { (char *)"GameWrap_Regions", _wrap_GameWrap_Regions, METH_VARARGS },
	 { (char *)"GameWrap_BeginRegion", _wrap_GameWrap_BeginRegion, METH_VARARGS },
	 { (char *)"GameWrap_CurrentRegion", _wrap_GameWrap_CurrentRegion, METH_VARARGS },
	 { (char *)"GameWrap_NextRegion", _wrap_GameWrap_NextRegion, METH_VARARGS },
	 { (char *)"GameWrap_IsValidRegion", _wrap_GameWrap_IsValidRegion, METH_VARARGS },
	 { (char *)"GameWrap_Portals", _wrap_GameWrap_Portals, METH_VARARGS },
	 { (char *)"GameWrap_BeginPortal", _wrap_GameWrap_BeginPortal, METH_VARARGS },
	 { (char *)"GameWrap_CurrentPortal", _wrap_GameWrap_CurrentPortal, METH_VARARGS },
	 { (char *)"GameWrap_NextPortal", _wrap_GameWrap_NextPortal, METH_VARARGS },
	 { (char *)"GameWrap_IsValidPortal", _wrap_GameWrap_IsValidPortal, METH_VARARGS },
	 { (char *)"GameWrap_Accounts", _wrap_GameWrap_Accounts, METH_VARARGS },
	 { (char *)"GameWrap_BeginAccount", _wrap_GameWrap_BeginAccount, METH_VARARGS },
	 { (char *)"GameWrap_CurrentAccount", _wrap_GameWrap_CurrentAccount, METH_VARARGS },
	 { (char *)"GameWrap_NextAccount", _wrap_GameWrap_NextAccount, METH_VARARGS },
	 { (char *)"GameWrap_IsValidAccount", _wrap_GameWrap_IsValidAccount, METH_VARARGS },
	 { (char *)"new_GameWrap", _wrap_new_GameWrap, METH_VARARGS },
	 { (char *)"delete_GameWrap", _wrap_delete_GameWrap, METH_VARARGS },
	 { (char *)"GameWrap_swigregister", GameWrap_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_room[] = {{"_p_room", 0, "room *", 0},{"_p_room"},{0}};
static swig_type_info _swigt__p_itemtemplate[] = {{"_p_itemtemplate", 0, "itemtemplate *", 0},{"_p_itemtemplate"},{0}};
static swig_type_info _swigt__p_charactertemplate[] = {{"_p_charactertemplate", 0, "charactertemplate *", 0},{"_p_charactertemplate"},{0}};
static swig_type_info _swigt__p_BasicLib__sint64[] = {{"_p_BasicLib__sint64", 0, "BasicLib::sint64 *", 0},{"_p_BasicLib__sint64"},{0}};
static swig_type_info _swigt__p_Action[] = {{"_p_Action", 0, "Action *", 0},{"_p_Action"},{0}};
static swig_type_info _swigt__p_Logic[] = {{"_p_Logic", 0, "Logic *", 0},{"_p_Logic"},{0}};
static swig_type_info _swigt__p_GameWrap[] = {{"_p_GameWrap", 0, "GameWrap *", 0},{"_p_GameWrap"},{0}};
static swig_type_info _swigt__p_item[] = {{"_p_item", 0, "item *", 0},{"_p_item"},{0}};
static swig_type_info _swigt__p_account[] = {{"_p_account", 0, "account *", 0},{"_p_account"},{0}};
static swig_type_info _swigt__p_region[] = {{"_p_region", 0, "region *", 0},{"_p_region"},{0}};
static swig_type_info _swigt__p_TimedAction[] = {{"_p_TimedAction", 0, "TimedAction *", 0},{"_p_TimedAction"},{0}};
static swig_type_info _swigt__p_character[] = {{"_p_character", 0, "character *", 0},{"_p_character"},{0}};
static swig_type_info _swigt__p_region__portals__iterator[] = {{"_p_region__portals__iterator", 0, "region::portals::iterator *", 0},{"_p_region__portals__iterator"},{0}};
static swig_type_info _swigt__p_region__rooms__iterator[] = {{"_p_region__rooms__iterator", 0, "region::rooms::iterator *", 0},{"_p_region__rooms__iterator"},{0}};
static swig_type_info _swigt__p_portal[] = {{"_p_portal", 0, "portal *", 0},{"_p_portal"},{0}};
static swig_type_info _swigt__p_room__portals__iterator[] = {{"_p_room__portals__iterator", 0, "room::portals::iterator *", 0},{"_p_room__portals__iterator"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_room, 
_swigt__p_itemtemplate, 
_swigt__p_charactertemplate, 
_swigt__p_BasicLib__sint64, 
_swigt__p_Action, 
_swigt__p_Logic, 
_swigt__p_GameWrap, 
_swigt__p_item, 
_swigt__p_account, 
_swigt__p_region, 
_swigt__p_TimedAction, 
_swigt__p_character, 
_swigt__p_region__portals__iterator, 
_swigt__p_region__rooms__iterator, 
_swigt__p_portal, 
_swigt__p_room__portals__iterator, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

